#include "parse.hpp"#include "memory.hpp"#include "onebitmemory.hpp"#include "twobitmemory.hpp"#include "gshare.hpp"#include "tournamentpredictor.hpp"#include <vector>#include <string>#include <fstream>#include <iostream>#include <sstream>#define ADDRESS translateAddress(inputfile.at(i))#define RESULT translateTaken(inputfile.at(i+1))using namespace std;//typedef bool (*PredictionFunction)(string address, string bpredict, void* context);bool checkTaken(unsigned int address, unsigned int bpredict);bool checkNTaken(unsigned int address, unsigned int bpredict);unsigned int translateTaken(string s);unsigned int translateAddress(string s);void writeTest(string elem, string outfile);string printFormatted(unsigned int result, unsigned int size);int main(int argc, char * argv[]){  unsigned int results[26];  memset(results, 0, 26 * sizeof(results[0]));  vector<string> inputfile;  vector<string> tracefile;  inputfile = parse::parseFile(argv[1], ' ');  const unsigned long int size = inputfile.size()/2;    /*    Initializing 1 Bit Memories    Sizes: 16, 32, 128, 256, 512, 1024, 2048  */  OneBitMemory onebit[7];  onebit[0] = OneBitMemory(16);  onebit[1] = OneBitMemory(32);  onebit[2] = OneBitMemory(128);  onebit[3] = OneBitMemory(256);  onebit[4] = OneBitMemory(512);  onebit[5] = OneBitMemory(1024);  onebit[6] = OneBitMemory(2048);    /*    Initializing 2 Bit Memories    Sizes: 16, 32, 128, 256, 512, 1024, 2048   */    TwoBitMemory twobit[7];  twobit[0] = TwoBitMemory(16);  twobit[1] = TwoBitMemory(32);  twobit[2] = TwoBitMemory(128);  twobit[3] = TwoBitMemory(256);  twobit[4] = TwoBitMemory(512);  twobit[5] = TwoBitMemory(1024);  twobit[6] = TwoBitMemory(2048);    /*    Start Initializing GShares   */    GShare gshares[9];  gshares[0] = GShare(3);  gshares[1] = GShare(4);  gshares[2] = GShare(5);  gshares[3] = GShare(6);  gshares[4] = GShare(7);  gshares[5] = GShare(8);  gshares[6] = GShare(9);  gshares[7] = GShare(10);  gshares[8] = GShare(11);  /*    Initialize Tournament Predictor  */  TournamentPredictor tourneypredict = TournamentPredictor();    int i = 0;  for(; i < inputfile.size(); i += 2){    if(checkTaken(0, RESULT)){      results[0]++;    }    if(checkNTaken(0, RESULT)){      results[1]++;    }    //One Bit Table Size 16    if(onebit[0].checkMatch(ADDRESS, RESULT)){      results[2]++;    }    //One Bit Table Size 32    if(onebit[1].checkMatch(ADDRESS, RESULT)){      results[3]++;    }    //One Bit Table Size 128    if(onebit[2].checkMatch(ADDRESS, RESULT)){      results[4]++;    }    //One Bit Table Size 256    if(onebit[3].checkMatch(ADDRESS, RESULT)){      results[5]++;    }       //One Bit Table Size 512    if(onebit[4].checkMatch(ADDRESS, RESULT)){      results[6]++;    }    //One Bit Table Size 1024    if(onebit[5].checkMatch(ADDRESS, RESULT)){      results[7]++;    }    //One Bit Table Size 2048    if(onebit[6].checkMatch(ADDRESS, RESULT)){      results[8]++;    }    //Two Bit Table Size 16    if(twobit[0].checkMatch(ADDRESS, RESULT)){      results[9]++;    }    //Two Bit Table Size 32    if(twobit[1].checkMatch(ADDRESS, RESULT)){      results[10]++;    }    //Two Bit Table Size 128    if(twobit[2].checkMatch(ADDRESS, RESULT)){      results[11]++;    }    //Two Bit Table Size 256    if(twobit[3].checkMatch(ADDRESS, RESULT)){      results[12]++;    }    //Two Bit Table Size 512    if(twobit[4].checkMatch(ADDRESS, RESULT)){      results[13]++;    }    //Two Bit Table Size 1024    if(twobit[5].checkMatch(ADDRESS, RESULT)){      results[14]++;    }    //Two Bit Table Size 2048    if(twobit[6].checkMatch(ADDRESS, RESULT)){      results[15]++;    }    //GShare History 3    if(gshares[0].checkMatch(ADDRESS, RESULT)){      results[16]++;    }        //GShare History 4    if(gshares[1].checkMatch(ADDRESS, RESULT)){      results[17]++;    }        //GShare History 5    if(gshares[2].checkMatch(ADDRESS, RESULT)){      results[18]++;    }    //GShare History 6    if(gshares[3].checkMatch(ADDRESS, RESULT)){      results[19]++;    }    //GShare History 7    if(gshares[4].checkMatch(ADDRESS, RESULT)){      results[20]++;    }    //GShare History 8    if(gshares[5].checkMatch(ADDRESS, RESULT)){      results[21]++;    }    //GShare History 9    if(gshares[6].checkMatch(ADDRESS, RESULT)){      results[22]++;    }    //GShare History 10    if(gshares[7].checkMatch(ADDRESS, RESULT)){      results[23]++;    }    //GShare History 11    if(gshares[8].checkMatch(ADDRESS, RESULT)){      results[24]++;    }    //Tournament Predictor    if(tourneypredict.checkMatch(ADDRESS, RESULT)){      results[25]++;    }      }    i = 0;  stringstream out(ios_base::app|ios_base::out);  string toFile;    //Always Taken  out << printFormatted(results[i++], size);  out << "\n";    //Always Not Taken  out << printFormatted(results[i++], size);  out << "\n";    //1-Bit BiModal  for(;i < 9; i++){    out << printFormatted(results[i], size);    if(i < 8)      out << " ";  }  out << "\n";  //  out >> toFile;    //2-Bit BiModal  for(;i < 16; i++){    out << printFormatted(results[i], size);    if(i < 15)      out << " ";  }  out << "\n";  // out >> toFile;    //GShare  for(; i < 25; i++){      out << printFormatted(results[i], size);      if(i < 24)	out << " ";  }  out <<  "\n";  //  out >> toFile;  //Tournament Predictor  out << printFormatted(results[i], size);  out << "\n";  toFile += out.str();;      writeTest(toFile, argv[2]);  return 0;  }bool checkTaken(unsigned int address, unsigned int bpredict){  return (bpredict == 1)?true:false;}bool checkNTaken(unsigned int address, unsigned int bpredict){  return (bpredict == 0)?true:false;}unsigned int translateTaken(string s){  return (s == "T")?1:0;}unsigned int translateAddress(string s){  string hex = s.substr(2, s.length());  stringstream ss(hex);  unsigned int out;  ss >> std::hex >>out;  return out;}void writeTest(string elem, string outfile){  ofstream file;  file.open(outfile, ofstream::out | ofstream::trunc);  file << elem;  file.close();}string printFormatted(unsigned int result, unsigned int size){  string out = "";  stringstream a;  a << result;  out += a.str();  a.str(string());  out += ",";  a << size;  out += a.str();;  a.str(string());  out += ";";  return out;}